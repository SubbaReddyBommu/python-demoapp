name: CI Deploy QA

on:
  workflow_dispatch:
  pull_request:
    branches: master
    paths:
      - 'src/**'

jobs:
  test:
    name: 'Tests & Linting'
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - run: |
          sudo apt-get update
          sudo apt-get install python3.10-venv --assume-yes
          sudo apt-get install python-dev-is-python3 --assume-yes

      - name: 'Run linting'
        run: make lint

      - name: 'Run tests'
        run: make test-report

      - name: 'Upload test results'
        uses: actions/upload-artifact@v3
        # Disabled when running locally with the nektos/act tool
        if: ${{ always() && !env.ACT }}
        with:
          name: test-results
          path: ./test-results.xml

      - name: 'Publish test results'
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() && !env.ACT }}
        with:
          files: test-results.xml

  build:
    name: 'Build & Push Image'
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      # Nicer than using github runid, I think, will be picked up automatically by make
      - name: 'Create datestamp image tag'
        id: set_image_tag
        run: |
          tag=$(date +%d-%m-%Y.%H%M)
          sudo echo "IMAGE_TAG=$tag" >> $GITHUB_ENV
          echo "image_tag=$tag" >> "$GITHUB_OUTPUT"


      - name: 'Docker build image'
        run: make image

      # Only when pushing to default branch (e.g. master or main), then push image to registry
      - name: 'Push to container registry'
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        if: github.ref == 'refs/heads/master'
        run: |
          docker login -u ${{ secrets.D_REG_USER }} -p ${{ secrets.D_REG_PW }}
          make push
  
  deploy:
    name: 'Deploy Staging'
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE_REPO: m219raptis/python-demoapp
      HOST: '64.227.114.131'
      PORT: 5008
      USER: root
    steps:
      - uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          key: ${{ secrets.D_SSH_KEY }}
          script: |
            docker login -u ${{ secrets.D_REG_USER }} -p ${{ secrets.D_REG_PW }}
            docker image pull ${{ env.IMAGE_REPO }}:${{ needs.build.outputs.image_tag }}
            docker ps | awk '/:${{ env.PORT }}/ {print $1}' | xargs -r docker stop | xargs -r docker rm
            docker container run -dp ${{ env.PORT }}:5008 -t ${{ env.IMAGE_REPO }}:${{ needs.build.outputs.image_tag }}
            
