name: CI Build App

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - 'src/**'
  pull_request:

env:
  IMAGE_REPO: m219raptis/python-demoapp

jobs:
  test:
    name: 'Tests & Linting'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - run: |
          sudo apt-get update
          sudo apt-get install python3.10-venv --assume-yes
          sudo apt-get install python-dev-is-python3 --assume-yes

      - name: 'Run linting'
        run: make lint

      - name: 'Run tests'
        run: make test-report

      - name: 'Upload test results'
        uses: actions/upload-artifact@v3
        # Disabled when running locally with the nektos/act tool
        if: ${{ always() && !env.ACT }}
        with:
          name: test-results
          path: ./test-results.xml

      - name: 'Publish test results'
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() && !env.ACT }}
        with:
          files: test-results.xml

  build:
    name: 'Build & Push Image'
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.test }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      # Nicer than using github runid, I think, will be picked up automatically by make
      - name: 'Create datestamp image tag'
        id: set_image_tag
        run: |
          sudo echo "IMAGE_TAG=$(date +%d-%m-%Y.%H%M)" >> $GITHUB_ENV
          echo "image_tag=${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"


      - name: 'Docker build image'
        run: make image

      # Only when pushing to default branch (e.g. master or main), then push image to registry
      - name: 'Push to container registry'
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          docker login -u ${{ secrets.D_REG_USER }} -p ${{ secrets.D_REG_PW }}
          make push
  
  deploy:
    name: 'Deploy to Digital Ocean'
    needs: build
    runs-on: ubuntu-latest
    env:
      HOST: '64.227.114.131'
      USER: root
    steps:
      - name: Create key file
        id: ssh_preparations
        run: |
          ls -la /home/runner/
          mkdir -p /home/runner/.ssh
          ssh-keyscan ${{env.HOST}} >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.D_SSH_KEY }}" > /home/runner/.ssh/digital_ocean_key
          chmod 600 /home/runner/.ssh/digital_ocean_key
          echo "ssh_key_file=/home/runner/.ssh/digital_ocean_key" >> "$GITHUB_OUTPUT"
      - run: |
          ssh -i ${{ steps.ssh_preparations.outputs.ssh_key_file }} ${{env.USER}}@${{env.HOST}}
          docker login -u ${{ secrets.D_REG_USER }} -p ${{ secrets.D_REG_PW }}
          docker ps -aq | xargs -r docker stop | xargs -r docker rm &&
          docker container run -dp 5008:5008 -t ${{ env.IMAGE_REPO }}:${{ needs.build.outputs.image_tag }}